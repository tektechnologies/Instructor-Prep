.parent {
 position: relative;
 /* display: inline; */
 /* position: absolute;
 height: 200vh; */
 /* also equal to 1904px */
 }
 
 .child-one {
   display: inline;
 /* position: absolute;
 top: 0; */
 }
 
 .child-two {
  display: block;
 


   /* position: fixed; */
   /* width:800px; */

   /* height: 50px; */
   /* z-index: 200; */
 }
 
 .child-three {
   display: inline-block;
    /* To place multiple block-like elements on the same horizontal line without floating them. To allow an inline element to have width and/or height while still remaining inline. */


    /* position: sticky; */
 
 }
 
 
 /* The display */
  /* property also determines how an element's children should behave. For example, setting the display property to display: flex makes the box a block-level box, and also converts its children to flex items. This enables the flex properties that control alignment, ordering and flow. */


 
  /* Flexbox and Grid # */
  /* There are two main layout mechanisms that create layout rules for multiple elements, flexbox and grid. They share similarities, but are designed to solve different layout problems. */
 
  /* Flexbox is a layout mechanism for one-dimensional layouts 
     a single-axis layout.
  */

  /* display-flex will cause
  Items to stay on the same axis and not wrap when they run out of space. Instead they will try to squash onto the same line as each other. 
  */

  /* This behaviour can be changed using the align-items, justify-content and flex-wrap properties. */
 
 /* what can you do with flex box?
    They can display as a row, or a column.
    They respect the writing mode of the document.
    They are single line by default, but can be asked to wrap onto multiple lines.
    Items in the layout can be visually reordered, away from their order in the DOM.
    Space can be distributed inside the items, so they become bigger and smaller according to the space available in their parent.
    Space can be distributed around the items and flex lines in a wrapped layout, using the Box Alignment properties.
    The items themselves can be aligned on the cross axis. 
*/
 
 
 /* grid */
/* 100A grid can be defined with rows and columns. You can choose how to size these row and column tracks or they can react to the size of the content.
Direct children of the grid container will be automatically placed onto this grid.
Or, you can place the items in the precise location that you want.
Lines and areas on the grid can be named to make placement easier.
Spare space in the grid container can be distributed between the tracks.
Grid items can be aligned within their area. */

 
 
 /* do this first */
 
 

 
 .parent {
   padding: 5px;
   background-color: #00AAFF;
 }
 
 .child {
   padding: 5px;
 }

 .child-one {
   background-color: rgb(116, 255, 116);
 }
 
 .child-two {
   background-color: rgb(248, 117, 117);
 }
 
 .child-three {
   background-color: rgb(255, 116, 232);
 }